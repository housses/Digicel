// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package sev_proj.imp_invoices_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: imp_invoices Purpose: Importe invoices from last year<br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class imp_invoices implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "imp_invoices";
	private final String projectName = "SEV_PROJ";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					imp_invoices.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(imp_invoices.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tSetProxy_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSetProxy_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSalesforceInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSetProxy_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSalesforceInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSetProxy_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tSetProxy_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tSetProxy_1 begin ] start
				 */

				ok_Hash.put("tSetProxy_1", false);
				start_Hash.put("tSetProxy_1", System.currentTimeMillis());

				currentComponent = "tSetProxy_1";

				int tos_count_tSetProxy_1 = 0;

				/**
				 * [tSetProxy_1 begin ] stop
				 */

				/**
				 * [tSetProxy_1 main ] start
				 */

				currentComponent = "tSetProxy_1";

				java.util.Properties props_tSetProxy_1 = System.getProperties();
				System.setProperty("http.proxySet", "true");

				System.setProperty("http.proxyHost", "172.24.4.200");
				System.setProperty("http.proxyPort", "8080");
				System.setProperty("http.nonProxyHosts", "192.168.0.* | localhost");

				System.setProperty("http.proxyUser", "");

				final String decryptedPassword_tSetProxy_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:8ILoAf45oezVsS8pLefqcNUMz4mQNzZVp4nHFg==");

				System.setProperty("http.proxyPassword", decryptedPassword_tSetProxy_1);

				java.net.Authenticator.setDefault(new java.net.Authenticator() {
					public java.net.PasswordAuthentication getPasswordAuthentication() {
						return new java.net.PasswordAuthentication("", decryptedPassword_tSetProxy_1.toCharArray());
					}
				});

				tos_count_tSetProxy_1++;

				/**
				 * [tSetProxy_1 main ] stop
				 */

				/**
				 * [tSetProxy_1 process_data_begin ] start
				 */

				currentComponent = "tSetProxy_1";

				/**
				 * [tSetProxy_1 process_data_begin ] stop
				 */

				/**
				 * [tSetProxy_1 process_data_end ] start
				 */

				currentComponent = "tSetProxy_1";

				/**
				 * [tSetProxy_1 process_data_end ] stop
				 */

				/**
				 * [tSetProxy_1 end ] start
				 */

				currentComponent = "tSetProxy_1";

				ok_Hash.put("tSetProxy_1", true);
				end_Hash.put("tSetProxy_1", System.currentTimeMillis());

				/**
				 * [tSetProxy_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tSetProxy_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tSalesforceInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tSetProxy_1 finally ] start
				 */

				currentComponent = "tSetProxy_1";

				/**
				 * [tSetProxy_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSetProxy_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_SEV_PROJ_imp_invoices = new byte[0];
		static byte[] commonByteArray_SEV_PROJ_imp_invoices = new byte[0];

		public String Id;

		public String getId() {
			return this.Id;
		}

		public String Registration_Number__c;

		public String getRegistration_Number__c() {
			return this.Registration_Number__c;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SEV_PROJ_imp_invoices.length) {
					if (length < 1024 && commonByteArray_SEV_PROJ_imp_invoices.length == 0) {
						commonByteArray_SEV_PROJ_imp_invoices = new byte[1024];
					} else {
						commonByteArray_SEV_PROJ_imp_invoices = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SEV_PROJ_imp_invoices, 0, length);
				strReturn = new String(commonByteArray_SEV_PROJ_imp_invoices, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SEV_PROJ_imp_invoices.length) {
					if (length < 1024 && commonByteArray_SEV_PROJ_imp_invoices.length == 0) {
						commonByteArray_SEV_PROJ_imp_invoices = new byte[1024];
					} else {
						commonByteArray_SEV_PROJ_imp_invoices = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_SEV_PROJ_imp_invoices, 0, length);
				strReturn = new String(commonByteArray_SEV_PROJ_imp_invoices, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SEV_PROJ_imp_invoices) {

				try {

					int length = 0;

					this.Id = readString(dis);

					this.Registration_Number__c = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_SEV_PROJ_imp_invoices) {

				try {

					int length = 0;

					this.Id = readString(dis);

					this.Registration_Number__c = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Id, dos);

				// String

				writeString(this.Registration_Number__c, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Id, dos);

				// String

				writeString(this.Registration_Number__c, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Id=" + Id);
			sb.append(",Registration_Number__c=" + Registration_Number__c);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tSalesforceInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tSalesforceInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tSalesforceInput_1 begin ] start
				 */

				ok_Hash.put("tSalesforceInput_1", false);
				start_Hash.put("tSalesforceInput_1", System.currentTimeMillis());

				currentComponent = "tSalesforceInput_1";

				int tos_count_tSalesforceInput_1 = 0;

				boolean doesNodeBelongToRequest_tSalesforceInput_1 = 0 == 0;
				@SuppressWarnings("unchecked")
				java.util.Map<String, Object> restRequest_tSalesforceInput_1 = (java.util.Map<String, Object>) globalMap
						.get("restRequest");
				String currentTRestRequestOperation_tSalesforceInput_1 = (String) (restRequest_tSalesforceInput_1 != null
						? restRequest_tSalesforceInput_1.get("OPERATION")
						: null);

				org.talend.components.api.component.ComponentDefinition def_tSalesforceInput_1 = new org.talend.components.salesforce.tsalesforceinput.TSalesforceInputDefinition();

				org.talend.components.api.component.runtime.Writer writer_tSalesforceInput_1 = null;
				org.talend.components.api.component.runtime.Reader reader_tSalesforceInput_1 = null;

				org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties props_tSalesforceInput_1 = (org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties) def_tSalesforceInput_1
						.createRuntimeProperties();
				props_tSalesforceInput_1.setValue("queryMode",
						org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties.QueryMode.Query);

				props_tSalesforceInput_1.setValue("manualQuery", true);

				props_tSalesforceInput_1.setValue("query", "SELECT Id, Registration_Number__c FROM Account");

				props_tSalesforceInput_1.setValue("includeDeleted", false);

				props_tSalesforceInput_1.setValue("batchSize", 250);

				props_tSalesforceInput_1.setValue("normalizeDelimiter", ";");

				props_tSalesforceInput_1.setValue("columnNameDelimiter", "_");

				props_tSalesforceInput_1.setValue("dataTimeUTC", true);

				props_tSalesforceInput_1.connection.setValue("endpoint", "https://test.salesforce.com/services/oauth2");

				props_tSalesforceInput_1.connection.setValue("loginType",
						org.talend.components.salesforce.SalesforceConnectionProperties.LoginType.OAuth);

				props_tSalesforceInput_1.connection.setValue("needCompression", false);

				props_tSalesforceInput_1.connection.setValue("timeout", 60000);

				props_tSalesforceInput_1.connection.setValue("httpChunked", true);

				props_tSalesforceInput_1.connection.setValue("clientId", "");

				props_tSalesforceInput_1.connection.setValue("oauth2FlowType",
						org.talend.components.common.oauth.OAuth2FlowType.JWT_Flow);

				props_tSalesforceInput_1.connection.setValue("apiVersion", "52.0");

				props_tSalesforceInput_1.connection.oauth2JwtFlow.setValue("issuer",
						"3MVG9ayzKZt5EleHrLNqwLFLHK0Q2VEb3J1lAQ9lphQndEQ33fSbHr1vydtjkjJBg4ma0mtIgrrXSgUP6xssn");

				props_tSalesforceInput_1.connection.oauth2JwtFlow.setValue("subject",
						"mbohui@reej-consulting.comfwireej");

				props_tSalesforceInput_1.connection.oauth2JwtFlow.setValue("expirationTime", 600);

				props_tSalesforceInput_1.connection.oauth2JwtFlow.setValue("keyStore",
						"C:/Users/clepillouer/Desktop/00D530000004cLF.jks");

				props_tSalesforceInput_1.connection.oauth2JwtFlow.setValue("keyStorePassword",
						routines.system.PasswordEncryptUtil.decryptPassword(
								"enc:routine.encryption.key.v1:nCZMjm2HB+ZVX9HWELIWR5YMpZK8jytMFt1KdF970ca2dlaG"));

				props_tSalesforceInput_1.connection.oauth2JwtFlow.setValue("certificateAlias", "Talend_certificat");

				props_tSalesforceInput_1.connection.oauth2JwtFlow.setValue("audience", "https://test.salesforce.com");

				props_tSalesforceInput_1.connection.userPassword.setValue("useAuth", false);

				props_tSalesforceInput_1.connection.proxy.setValue("useProxy", false);

				props_tSalesforceInput_1.connection.proxy.userPassword.setValue("useAuth", false);

				props_tSalesforceInput_1.connection.referencedComponent.setValue("referenceDefinitionName",
						"tSalesforceConnection");

				props_tSalesforceInput_1.module.setValue("moduleName", "Account");

				props_tSalesforceInput_1.module.connection.setValue("endpoint",
						"https://test.salesforce.com/services/oauth2");

				props_tSalesforceInput_1.module.connection.setValue("loginType",
						org.talend.components.salesforce.SalesforceConnectionProperties.LoginType.OAuth);

				props_tSalesforceInput_1.module.connection.setValue("needCompression", false);

				props_tSalesforceInput_1.module.connection.setValue("timeout", 60000);

				props_tSalesforceInput_1.module.connection.setValue("httpChunked", true);

				props_tSalesforceInput_1.module.connection.setValue("clientId", "");

				props_tSalesforceInput_1.module.connection.setValue("oauth2FlowType",
						org.talend.components.common.oauth.OAuth2FlowType.JWT_Flow);

				props_tSalesforceInput_1.module.connection.setValue("apiVersion", "52.0");

				props_tSalesforceInput_1.module.connection.oauth2JwtFlow.setValue("issuer",
						"3MVG9ayzKZt5EleHrLNqwLFLHK0Q2VEb3J1lAQ9lphQndEQ33fSbHr1vydtjkjJBg4ma0mtIgrrXSgUP6xssn");

				props_tSalesforceInput_1.module.connection.oauth2JwtFlow.setValue("subject",
						"mbohui@reej-consulting.comfwireej");

				props_tSalesforceInput_1.module.connection.oauth2JwtFlow.setValue("expirationTime", 600);

				props_tSalesforceInput_1.module.connection.oauth2JwtFlow.setValue("keyStore",
						"C:/Users/clepillouer/Desktop/00D530000004cLF.jks");

				props_tSalesforceInput_1.module.connection.oauth2JwtFlow.setValue("keyStorePassword",
						routines.system.PasswordEncryptUtil.decryptPassword(
								"enc:routine.encryption.key.v1:6Br564cA9Fol0/KfxDi4Onq5+ZWbMKmiNvC/Dqc/zHk+K7Dw"));

				props_tSalesforceInput_1.module.connection.oauth2JwtFlow.setValue("certificateAlias",
						"Talend_certificat");

				props_tSalesforceInput_1.module.connection.oauth2JwtFlow.setValue("audience",
						"https://test.salesforce.com");

				props_tSalesforceInput_1.module.connection.userPassword.setValue("useAuth", false);

				props_tSalesforceInput_1.module.connection.proxy.setValue("useProxy", false);

				props_tSalesforceInput_1.module.connection.proxy.userPassword.setValue("useAuth", false);

				props_tSalesforceInput_1.module.connection.referencedComponent.setValue("referenceDefinitionName",
						"tSalesforceConnection");

				class SchemaSettingTool_tSalesforceInput_1_1_fisrt {

					String getSchemaValue() {

						StringBuilder s = new StringBuilder();

						a("{\"type\":\"record\",", s);

						a("\"name\":\"MAIN\",\"fields\":[{", s);

						a("\"name\":\"Id\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Id\",\"talend.field.dbColumnName\":\"Id\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Id\",\"di.column.relatedEntity\":\"\"},{",
								s);

						a("\"name\":\"Registration_Number__c\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Registration_Number__c\",\"talend.field.dbColumnName\":\"Registration_Number__c\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"80\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Registration_Number__c\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"MAIN\"}",
								s);

						return s.toString();

					}

					void a(String part, StringBuilder strB) {
						strB.append(part);
					}

				}

				SchemaSettingTool_tSalesforceInput_1_1_fisrt sst_tSalesforceInput_1_1_fisrt = new SchemaSettingTool_tSalesforceInput_1_1_fisrt();

				props_tSalesforceInput_1.module.main.setValue("schema",
						new org.apache.avro.Schema.Parser().parse(sst_tSalesforceInput_1_1_fisrt.getSchemaValue()));

				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_1.connection.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tSalesforceInput_1 = props_tSalesforceInput_1.connection.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tSalesforceInput_1 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_1 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tSalesforceInput_1
										+ "_COMPONENT_RUNTIME_PROPERTIES");
						props_tSalesforceInput_1.connection.referencedComponent
								.setReference(referencedComponentProperties_tSalesforceInput_1);
					}
				}
				if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_1.module.connection.referencedComponent.referenceType
						.getValue()) {
					final String referencedComponentInstanceId_tSalesforceInput_1 = props_tSalesforceInput_1.module.connection.referencedComponent.componentInstanceId
							.getStringValue();
					if (referencedComponentInstanceId_tSalesforceInput_1 != null) {
						org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_1 = (org.talend.daikon.properties.Properties) globalMap
								.get(referencedComponentInstanceId_tSalesforceInput_1
										+ "_COMPONENT_RUNTIME_PROPERTIES");
						props_tSalesforceInput_1.module.connection.referencedComponent
								.setReference(referencedComponentProperties_tSalesforceInput_1);
					}
				}
				globalMap.put("tSalesforceInput_1_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceInput_1);
				globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "8.0");
				globalMap.put("TALEND_COMPONENTS_VERSION", "0.37.0");
				java.net.URL mappings_url_tSalesforceInput_1 = this.getClass().getResource("/xmlMappings");
				globalMap.put("tSalesforceInput_1_MAPPINGS_URL", mappings_url_tSalesforceInput_1);

				org.talend.components.api.container.RuntimeContainer container_tSalesforceInput_1 = new org.talend.components.api.container.RuntimeContainer() {
					public Object getComponentData(String componentId, String key) {
						return globalMap.get(componentId + "_" + key);
					}

					public void setComponentData(String componentId, String key, Object data) {
						globalMap.put(componentId + "_" + key, data);
					}

					public String getCurrentComponentId() {
						return "tSalesforceInput_1";
					}

					public Object getGlobalData(String key) {
						return globalMap.get(key);
					}
				};

				int nb_line_tSalesforceInput_1 = 0;

				org.talend.components.api.component.ConnectorTopology topology_tSalesforceInput_1 = null;
				topology_tSalesforceInput_1 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

				org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceInput_1 = def_tSalesforceInput_1
						.getRuntimeInfo(org.talend.components.api.component.runtime.ExecutionEngine.DI,
								props_tSalesforceInput_1, topology_tSalesforceInput_1);
				java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceInput_1 = def_tSalesforceInput_1
						.getSupportedConnectorTopologies();

				org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceInput_1 = (org.talend.components.api.component.runtime.RuntimableRuntime) (Class
						.forName(runtime_info_tSalesforceInput_1.getRuntimeClassName()).newInstance());
				org.talend.daikon.properties.ValidationResult initVr_tSalesforceInput_1 = componentRuntime_tSalesforceInput_1
						.initialize(container_tSalesforceInput_1, props_tSalesforceInput_1);

				if (initVr_tSalesforceInput_1
						.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
					throw new RuntimeException(initVr_tSalesforceInput_1.getMessage());
				}

				if (componentRuntime_tSalesforceInput_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
					org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceInput_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization) componentRuntime_tSalesforceInput_1;
					compDriverInitialization_tSalesforceInput_1.runAtDriver(container_tSalesforceInput_1);
				}

				org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceInput_1 = null;
				if (componentRuntime_tSalesforceInput_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
					sourceOrSink_tSalesforceInput_1 = (org.talend.components.api.component.runtime.SourceOrSink) componentRuntime_tSalesforceInput_1;
					if (doesNodeBelongToRequest_tSalesforceInput_1) {
						org.talend.daikon.properties.ValidationResult vr_tSalesforceInput_1 = sourceOrSink_tSalesforceInput_1
								.validate(container_tSalesforceInput_1);
						if (vr_tSalesforceInput_1
								.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR) {
							throw new RuntimeException(vr_tSalesforceInput_1.getMessage());
						}
					}
				}

				if (sourceOrSink_tSalesforceInput_1 instanceof org.talend.components.api.component.runtime.Source) {
					org.talend.components.api.component.runtime.Source source_tSalesforceInput_1 = (org.talend.components.api.component.runtime.Source) sourceOrSink_tSalesforceInput_1;
					reader_tSalesforceInput_1 = source_tSalesforceInput_1.createReader(container_tSalesforceInput_1);
					reader_tSalesforceInput_1 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(
							reader_tSalesforceInput_1, container_tSalesforceInput_1);

					boolean multi_output_is_allowed_tSalesforceInput_1 = false;
					org.talend.components.api.component.Connector c_tSalesforceInput_1 = null;
					for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceInput_1
							.getAvailableConnectors(null, true)) {
						if (currentConnector.getName().equals("MAIN")) {
							c_tSalesforceInput_1 = currentConnector;
						}

						if (currentConnector.getName().equals("REJECT")) {// it's better to move the code to javajet
							multi_output_is_allowed_tSalesforceInput_1 = true;
						}
					}
					org.apache.avro.Schema schema_tSalesforceInput_1 = props_tSalesforceInput_1
							.getSchema(c_tSalesforceInput_1, true);

					org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceInput_1 = org.talend.codegen.enforcer.EnforcerCreator
							.createOutgoingEnforcer(schema_tSalesforceInput_1, false);

					// Create a reusable factory that converts the output of the reader to an
					// IndexedRecord.
					org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceInput_1 = null;

					// Iterate through the incoming data.
					boolean available_tSalesforceInput_1 = reader_tSalesforceInput_1.start();

					resourceMap.put("reader_tSalesforceInput_1", reader_tSalesforceInput_1);

					for (; available_tSalesforceInput_1; available_tSalesforceInput_1 = reader_tSalesforceInput_1
							.advance()) {
						nb_line_tSalesforceInput_1++;

						if (multi_output_is_allowed_tSalesforceInput_1) {

							row2 = null;

						}

						try {
							Object data_tSalesforceInput_1 = reader_tSalesforceInput_1.getCurrent();

							if (multi_output_is_allowed_tSalesforceInput_1) {
								row2 = new row2Struct();
							}

							// Construct the factory once when the first data arrives.
							if (factory_tSalesforceInput_1 == null) {
								factory_tSalesforceInput_1 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>) new org.talend.daikon.avro.AvroRegistry()
										.createIndexedRecordConverter(data_tSalesforceInput_1.getClass());
							}

							// Enforce the outgoing schema on the input.
							outgoingEnforcer_tSalesforceInput_1
									.setWrapped(factory_tSalesforceInput_1.convertToAvro(data_tSalesforceInput_1));
							Object columnValue_0_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(0);
							row2.Id = (String) (columnValue_0_tSalesforceInput_1);
							Object columnValue_1_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(1);
							row2.Registration_Number__c = (String) (columnValue_1_tSalesforceInput_1);
						} catch (org.talend.components.api.exception.DataRejectException e_tSalesforceInput_1) {
							java.util.Map<String, Object> info_tSalesforceInput_1 = e_tSalesforceInput_1
									.getRejectInfo();

							// TODO use a method instead of getting method by the special key
							// "error/errorMessage"
							Object errorMessage_tSalesforceInput_1 = null;
							if (info_tSalesforceInput_1.containsKey("error")) {
								errorMessage_tSalesforceInput_1 = info_tSalesforceInput_1.get("error");
							} else if (info_tSalesforceInput_1.containsKey("errorMessage")) {
								errorMessage_tSalesforceInput_1 = info_tSalesforceInput_1.get("errorMessage");
							} else {
								errorMessage_tSalesforceInput_1 = "Rejected but error message missing";
							}
							errorMessage_tSalesforceInput_1 = "Row " + nb_line_tSalesforceInput_1 + ": "
									+ errorMessage_tSalesforceInput_1;
							System.err.println(errorMessage_tSalesforceInput_1);

							// If the record is reject, the main line record should put NULL
							row2 = null;

						} // end of catch

						java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceInput_1 = new java.util.ArrayList<Object>();
						java.util.Iterator outgoingMainRecordsIt_tSalesforceInput_1 = null;

						/**
						 * [tSalesforceInput_1 begin ] stop
						 */

						/**
						 * [tSalesforceInput_1 main ] start
						 */

						currentComponent = "tSalesforceInput_1";

						tos_count_tSalesforceInput_1++;

						/**
						 * [tSalesforceInput_1 main ] stop
						 */

						/**
						 * [tSalesforceInput_1 process_data_begin ] start
						 */

						currentComponent = "tSalesforceInput_1";

						/**
						 * [tSalesforceInput_1 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_1 main ] start
						 */

						currentComponent = "tLogRow_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row2"

							);
						}

///////////////////////		

						strBuffer_tLogRow_1 = new StringBuilder();

						if (row2.Id != null) { //

							strBuffer_tLogRow_1.append(String.valueOf(row2.Id));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row2.Registration_Number__c != null) { //

							strBuffer_tLogRow_1.append(String.valueOf(row2.Registration_Number__c));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_1 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
						}
						consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
						consoleOut_tLogRow_1.flush();
						nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

						tos_count_tLogRow_1++;

						/**
						 * [tLogRow_1 main ] stop
						 */

						/**
						 * [tLogRow_1 process_data_begin ] start
						 */

						currentComponent = "tLogRow_1";

						/**
						 * [tLogRow_1 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_1 process_data_end ] start
						 */

						currentComponent = "tLogRow_1";

						/**
						 * [tLogRow_1 process_data_end ] stop
						 */

						/**
						 * [tSalesforceInput_1 process_data_end ] start
						 */

						currentComponent = "tSalesforceInput_1";

						/**
						 * [tSalesforceInput_1 process_data_end ] stop
						 */

						/**
						 * [tSalesforceInput_1 end ] start
						 */

						currentComponent = "tSalesforceInput_1";

// end of generic

						resourceMap.put("finish_tSalesforceInput_1", Boolean.TRUE);

					} // while
				} // end of "if (sourceOrSink_tSalesforceInput_1 instanceof ...Source)"
				java.util.Map<String, Object> resultMap_tSalesforceInput_1 = null;
				if (reader_tSalesforceInput_1 != null) {
					reader_tSalesforceInput_1.close();
					resultMap_tSalesforceInput_1 = reader_tSalesforceInput_1.getReturnValues();
				}
				if (resultMap_tSalesforceInput_1 != null) {
					for (java.util.Map.Entry<String, Object> entry_tSalesforceInput_1 : resultMap_tSalesforceInput_1
							.entrySet()) {
						switch (entry_tSalesforceInput_1.getKey()) {
						case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE:
							container_tSalesforceInput_1.setComponentData("tSalesforceInput_1", "ERROR_MESSAGE",
									entry_tSalesforceInput_1.getValue());
							break;
						case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT:
							container_tSalesforceInput_1.setComponentData("tSalesforceInput_1", "NB_LINE",
									entry_tSalesforceInput_1.getValue());
							break;
						case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT:
							container_tSalesforceInput_1.setComponentData("tSalesforceInput_1", "NB_SUCCESS",
									entry_tSalesforceInput_1.getValue());
							break;
						case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT:
							container_tSalesforceInput_1.setComponentData("tSalesforceInput_1", "NB_REJECT",
									entry_tSalesforceInput_1.getValue());
							break;
						default:
							StringBuilder studio_key_tSalesforceInput_1 = new StringBuilder();
							for (int i_tSalesforceInput_1 = 0; i_tSalesforceInput_1 < entry_tSalesforceInput_1.getKey()
									.length(); i_tSalesforceInput_1++) {
								char ch_tSalesforceInput_1 = entry_tSalesforceInput_1.getKey()
										.charAt(i_tSalesforceInput_1);
								if (Character.isUpperCase(ch_tSalesforceInput_1) && i_tSalesforceInput_1 > 0) {
									studio_key_tSalesforceInput_1.append('_');
								}
								studio_key_tSalesforceInput_1.append(ch_tSalesforceInput_1);
							}
							container_tSalesforceInput_1.setComponentData("tSalesforceInput_1",
									studio_key_tSalesforceInput_1.toString().toUpperCase(java.util.Locale.ENGLISH),
									entry_tSalesforceInput_1.getValue());
							break;
						}
					}
				}

				ok_Hash.put("tSalesforceInput_1", true);
				end_Hash.put("tSalesforceInput_1", System.currentTimeMillis());

				/**
				 * [tSalesforceInput_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tSalesforceInput_1 finally ] start
				 */

				currentComponent = "tSalesforceInput_1";

// finally of generic

				if (resourceMap.get("finish_tSalesforceInput_1") == null) {
					if (resourceMap.get("reader_tSalesforceInput_1") != null) {
						try {
							((org.talend.components.api.component.runtime.Reader) resourceMap
									.get("reader_tSalesforceInput_1")).close();
						} catch (java.io.IOException e_tSalesforceInput_1) {
							String errorMessage_tSalesforceInput_1 = "failed to release the resource in tSalesforceInput_1 :"
									+ e_tSalesforceInput_1.getMessage();
							System.err.println(errorMessage_tSalesforceInput_1);
						}
					}
				}

				/**
				 * [tSalesforceInput_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSalesforceInput_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	private final org.talend.components.common.runtime.SharedConnectionsPool connectionPool = new org.talend.components.common.runtime.SharedConnectionsPool() {
		public java.sql.Connection getDBConnection(String dbDriver, String url, String userName, String password,
				String dbConnectionName) throws ClassNotFoundException, java.sql.SQLException {
			return SharedDBConnection.getDBConnection(dbDriver, url, userName, password, dbConnectionName);
		}

		public java.sql.Connection getDBConnection(String dbDriver, String url, String dbConnectionName)
				throws ClassNotFoundException, java.sql.SQLException {
			return SharedDBConnection.getDBConnection(dbDriver, url, dbConnectionName);
		}
	};

	private static final String GLOBAL_CONNECTION_POOL_KEY = "GLOBAL_CONNECTION_POOL";

	{
		globalMap.put(GLOBAL_CONNECTION_POOL_KEY, connectionPool);
	}

	public static void main(String[] args) {
		final imp_invoices imp_invoicesClass = new imp_invoices();

		int exitCode = imp_invoicesClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = imp_invoices.class.getClassLoader()
					.getResourceAsStream("sev_proj/imp_invoices_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = imp_invoices.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tSetProxy_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tSetProxy_1) {
			globalMap.put("tSetProxy_1_SUBPROCESS_STATE", -1);

			e_tSetProxy_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : imp_invoices");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 65341 characters generated by Talend Open Studio for Data Integration on the
 * September 15, 2022 at 6:13:50 AM BOT
 ************************************************************************************************/